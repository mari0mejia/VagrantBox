# Mon 27 Apr 2020 03:36:12 PM PDT
# Tue Nov 16 13:05:48 PST 2021

# This Makefile works with p1 - p6
#
# Requirements:
#
# (1) the name of the directory is the phase name (p1, p2, etc)
#
# (2) every .cpp file in this directory is assumed to be part of the gpl project
#     Keeping other .cpp files in this directory requires replacing
#     	CPPSOURCEFILES = $(wildcard *.cpp)" 
#     with a list of project files:
#     	CPPSOURCEFILES = file1.cpp file2.cpp file3.cpp

CXX = g++
CPPFLAGS = -std=c++20 -g
DEPDIR = deps
OBJDIR = objs
DEPFLAGS = -MT $@ -MMD -MF $(DEPDIR)/$*.Td #removed -MP
#postcompiling technique grabbed from here: http://make.mad-scientist.net/papers/advanced-auto-dependency-generation/
POSTCOMPILE = mv -f $(DEPDIR)/$*.Td $(DEPDIR)/$*.d && touch $@
CPPWARNINGS = -Wall -pedantic

# Assume the current directory begins with the phase name.
#   /home/.../p2   is the directory containing the second project
#   The cut allows directories named as p2_userid, stripping off 
#   everything after the first two characters in the basename
PHASE := $(shell sh -c "basename \"$(PWD)\"|cut -c1-2")

# Set up the command line options to define pre-processor variables
# -DSYM_TAB has same effect of adding "#define SYM_TAB" to .cpp file
# SYM_TAB and GRAPHICS are used by the public code
#   SYM_TAB turns on the symbol_table for p2-p6
#   GRAPHICS turns on graphics for p4-p6
# P3 P4 P5 P6 allows the use of a single file for multiple phases.
# It is currently used by the instructor's solution. Use if desired (not necessary)
ifeq ($(PHASE),p1)
  MACRO_DEFINITIONS = -DP1
else ifeq ($(PHASE),p2)
  MACRO_DEFINITIONS = -DSYM_TAB -DP2
else ifeq ($(PHASE),p3)
  MACRO_DEFINITIONS = -DSYM_TAB -DP2 -DP3
else ifeq ($(PHASE),p4)
  MACRO_DEFINITIONS = -DSYM_TAB -DGRAPHICS  -DP2 -DP3 -DP4
else ifeq ($(PHASE),p5)
  MACRO_DEFINITIONS = -DSYM_TAB -DGRAPHICS -DP3 -DP4 -DP5
else ifeq ($(PHASE),ex)
  MACRO_DEFINITIONS = -DSYM_TAB -DGRAPHICS -DP3 -DP4 -DP5
else ifeq ($(PHASE),pr)
  MACRO_DEFINITIONS = -DSYM_TAB -DGRAPHICS -DP3 -DP4 -DP5
else ifeq ($(PHASE),p6)
  MACRO_DEFINITIONS = -DSYM_TAB -DGRAPHICS -DP3 -DP4 -DP5 -DP6
else
  $(error Bad directory name: $(PHASE). Directory name must be one of: p1,p2,...p6)
endif

LIBDIRS  = -L/usr/X11R6/lib
LIBS = -lX11 -lglut -lGL -lGLU -lm

# CPPSOURCEFILES contains all .cpp files in the current directory
#   assumes every .cpp file in current directory is part of GPL.
#   Replace $(wildcard *.cpp) with a list of files if you keep 
#   non-gpl .cpp files in this directory
CPPSOURCEFILES = $(wildcard *.cpp)

# create a list of object files by substituting the .cpp in above list with .o
# flex and bison files added manually due to .c (vs .cpp) extension
OBJFILES = $(CPPSOURCEFILES:%.cpp=$(OBJDIR)/%.o) $(OBJDIR)/lex.yy.o $(OBJDIR)/gpl.tab.o

# create dependencies files. (generated with g++ -MT sourcefile -MMD -MF outputfile)
# flex and bison files added manually due to .c (vs .cpp) extension
DEPFILES = $(CPPSOURCEFILES:%.cpp=$(DEPDIR)/%.d) $(DEPDIR)/gpl.tab.d $(DEPDIR)/lex.yy.d

# compile the gpl executable
gpl: $(OBJFILES)
	@echo "--------------------------------------------------------------------"
	@echo " compiling phase $(PHASE) "
	@echo "--------------------------------------------------------------------"
	$(CXX) -g -o gpl $(OBJFILES) $(LIBDIRS) $(LIBS)

lex.yy.c: gpl.l gpl.tab.h
	flex gpl.l # generates lex.yy.c which includes gpl.tab.h

gpl.tab.c gpl.tab.h: gpl.y
	bison -vd gpl.y

# pattern rule to compile .cpp files
$(OBJDIR)/%.o : %.cpp $(DEPDIR)/%.d | $(DEPDIR) $(OBJDIR)
	$(CXX) $(DEPFLAGS) $(CPPFLAGS) $(CPPWARNINGS) $(MACRO_DEFINITIONS) -o $@ -c $<
	$(POSTCOMPILE)

# pattern rule to compile .c files generated from flex & bison
$(OBJDIR)/%.o : %.c $(DEPDIR)/%.d | $(DEPDIR) $(OBJDIR)
	$(CXX) $(DEPFLAGS) $(CPPFLAGS) $(CPPWARNINGS) $(MACRO_DEFINITIONS) -o $@ -c $<
	$(POSTCOMPILE)

$(DEPDIR): ; @mkdir -p $@

$(OBJDIR): ; @mkdir -p $@

# include dependency files (.d file) generated by g++
$(DEPFILES):
include $(wildcard $(DEPFILES))

clean:
	rm -f $(OBJFILES) gpl lex.yy.c gpl.output gpl.tab.h gpl.tab.c *.gch a.out
	rm -rf results $(DEPDIR) $(OBJDIR)
