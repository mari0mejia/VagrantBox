
%option noyywrap
%option nodefault
%option nounput

%{
#include "gpl.tab.h"  // generated by bison, this file contains: union yylval declaration & T_* enumerations
#include "error.h"    // this file contains some standardized error reporting
#include <iostream>

Error error_handler; // error reporting object

// The line_count variable keeps track of what input line flex is reading.
// It will be used for reporting the line numbers of errors.
// 
//   To use in other source files, declare the variable with "extern" in front
//   of it to indicate that it is defined in a different source file: 
//      extern int line_count;
int line_count = 1;

void illegal_token_error()
{
  // have the error handling object report the problem
  // note: it uses line_count as a global variable
  error_handler.error(Error::ILLEGAL_TOKEN, yytext);

  // create a string to hold the current text
  // put that string in the yylval union so it can be used by parser (.y file)
  // NOTE THAT IF THE NAMES OF THE MEMBERS OF YOUR UNION ARE DIFFERENT,
  // YOU WILL HAVE TO CHANGE union_string TO WHATEVER YOU HAVE NAMED
  // YOUR string* MEMBER
  yylval.union_string = new std::string(yytext);
}


%}

%%




 /* This should be the last pattern. If the lexer reaches this pattern
    there has been an error
  */
.               {illegal_token_error(); return T_ERROR;}

%%
